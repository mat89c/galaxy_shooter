/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/game/Asteroids.js":
/*!*******************************!*\
  !*** ./src/game/Asteroids.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global\n    BABYLON\n*/\n\n/**\n*Create Asteroids\n*@constructor\n*@singleton\n*/\nfunction Asteroids(scene, helpers) {\n    \"use strict\";\n\n    if (_typeof(Asteroids.instance) === \"object\") {\n        return Asteroids.instance;\n    }\n    Asteroids.instance = this;\n\n    var _scene = scene;\n    var _helpers = helpers;\n    var asteroidsConfig = {\n        num: 600, // Numbers of asteroids\n        diameter: 10, // Diameter of asteroids\n        rotation: 0.0001, // Asteroids rotation speed\n        area: 850 // The size of the asteroids area\n    };\n\n    Asteroids.prototype.create = function () {\n        var SPS = new BABYLON.SolidParticleSystem('SPS', _scene, { particleIntersection: true });\n        var sphere = BABYLON.MeshBuilder.CreateSphere(\"s\", { diameter: asteroidsConfig.diameter, segments: 3 }, _scene);\n        var positionFunction = function positionFunction(particle) {\n            var _particle = particle;\n            var radiusTmp = Math.floor(Math.random() * asteroidsConfig.area) + 700;\n            var radius = null;\n            _particle.scale.x = Math.random() * 2 + 0.8;\n            _particle.scale.y = Math.random() + 0.8;\n            _particle.scale.z = Math.random() * 2 + 0.8;\n\n            var rand = Math.random();\n            var randomPosition = false;\n\n            /**\n            *Random asteroid position\n            */\n            if (rand > 0 && rand < 0.25) {\n                radius = -radiusTmp;\n            } else if (rand > 0.25 && rand < 0.5) {\n                radius = radiusTmp;\n            } else {\n                radiusTmp = Math.floor(Math.random() * 5000) + 700;\n                radius = -radiusTmp;\n                randomPosition = true;\n            }\n\n            var angle = Math.random() * Math.PI * 2;\n            _particle.position.x = Math.cos(angle) * radius;\n            _particle.position.z = Math.sin(angle) * radius;\n\n            if (randomPosition) {\n                _particle.position.y = Math.floor(Math.random() * 3000) + 800;\n            } else {\n                _particle.position.y = Math.floor(Math.random() * 100) + -100;\n            }\n            _particle.rotation.x = Math.random() * 3.5;\n            _particle.rotation.y = Math.random() * 3.5;\n            _particle.rotation.z = Math.random() * 3.5;\n\n            var gray = 1.0 - Math.random() * 0.3;\n            particle.color = new BABYLON.Color4(gray, gray, gray, 1);\n        };\n        var vertexFunction = function vertexFunction(vertex) {\n            vertex.x *= Math.random() + 1;\n            vertex.y *= Math.random() + 1;\n            vertex.z *= Math.random() + 1;\n        };\n\n        /**\n        *Create asteroid texture and material\n        *@return {Object} Asteroid material\n        */\n        var createTexture = function createTexture() {\n            var material = new BABYLON.StandardMaterial(\"asteroidMaterial\", _scene);\n            var texture = new BABYLON.Texture(_helpers.baseUrl() + '/assets/textures/asteroid.jpg', _scene);\n            material.freeze();\n            material.diffuseTexture = texture;\n            material.specularTexture = texture;\n            material.backFaceCulling = false;\n\n            return material;\n        };\n\n        var rotateAsteroids = function rotateAsteroids() {\n            var tmp = 0.0;\n            _scene.onBeforeRenderObservable.add(function () {\n                SPS.setParticles();\n                SPS.mesh.rotation.y -= asteroidsConfig.rotation;\n                SPS.mesh.position.y = Math.sin(tmp) * 2;\n                tmp -= 0.02;\n            });\n        };\n\n        SPS.addShape(sphere, asteroidsConfig.num, { positionFunction: positionFunction, vertexFunction: vertexFunction });\n        sphere.dispose();\n\n        var mesh = SPS.buildMesh();\n        mesh.rotate(BABYLON.Axis.Z, +0.4, BABYLON.Space.WORLD);\n        mesh.material = createTexture();\n\n        SPS.setParticles();\n        SPS.refreshVisibleSize();\n        SPS.computeParticleTexture = false;\n        //rotateAsteroids();\n    };\n}\n\nexports.default = Asteroids;\n\n//# sourceURL=webpack:///./src/game/Asteroids.js?");

/***/ }),

/***/ "./src/game/BabylonScene.js":
/*!**********************************!*\
  !*** ./src/game/BabylonScene.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global\n    BABYLON, window\n*/\n\n/**\n*Init Babylon.js Scene\n*@constructor\n*@singleton\n*/\nfunction BabylonScene() {\n    \"use strict\";\n\n    if (_typeof(BabylonScene.instance) === \"object\") {\n        return BabylonScene.instance;\n    }\n\n    BabylonScene.instance = this;\n\n    var canvas = document.getElementById(\"canvas\");\n    var engine = new BABYLON.Engine(canvas, false, { stencil: true }, false);\n    var scene = new BABYLON.Scene(engine);\n    var earth = null;\n\n    var fps = document.getElementById(\"fps\");\n\n    engine.enableOfflineSupport = false;\n    engine.doNotHandleContextLost = true;\n\n    scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);\n    scene.autoClear = false;\n    scene.autoClearDepthAndStencil = false;\n    scene.blockMaterialDirtyMechanism = true;\n    scene.useGeometryIdsMap = true;\n    scene.useMaterialMeshMap = true;\n    scene.useClonedMeshMap = true;\n\n    scene.executeWhenReady(function () {\n        engine.runRenderLoop(function () {\n            earth.rotation.y -= 0.0003;\n            fps.innerHTML = engine.getFps().toFixed();\n            scene.render();\n        });\n    });\n\n    BabylonScene.prototype.createLights = function () {\n        var light1 = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, -1000, 0), scene);\n        var light2 = new BABYLON.HemisphericLight(\"light2\", new BABYLON.Vector3(0, 1000, 0), scene);\n        var light3 = new BABYLON.PointLight(\"light3\", new BABYLON.Vector3(0, 0, 0), scene);\n\n        light1.intensity = 0.6;\n        light2.intensity = 0.6;\n        light3.intensity = 0.6;\n    };\n\n    BabylonScene.prototype.createSkyboxAndEarth = function (helpers) {\n        var skybox = BABYLON.Mesh.CreateBox(\"skyBox\", 10000, scene);\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\n        var xhr = new XMLHttpRequest();\n        var _helpers = helpers;\n        earth = BABYLON.MeshBuilder.CreateSphere(\"earth\", { segments: 40, diameter: 1200 }, scene);\n        earth.convertToUnIndexedMesh();\n        earth.visibility = false;\n        earth.rotate(BABYLON.Axis.Y, -0.9, BABYLON.Space.LOCAL);\n        earth.rotate(BABYLON.Axis.Z, +0.4, BABYLON.Space.WORLD);\n\n        xhr.overrideMimeType(\"application/json\");\n        if (window.matchMedia('screen and (min-width:1024px)').matches) {\n            xhr.open('GET', _helpers.baseUrl() + \"/assets/json/SkyboxAndEarthTextures2048.json\", true);\n        } else {\n            xhr.open('GET', _helpers.baseUrl() + \"/assets/json/SkyboxAndEarthTextures1024.json\", true);\n        }\n        xhr.send();\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                var response = JSON.parse(xhr.responseText);\n                var texturesSkybox = [response.right, response.top, response.front, response.left, response.bottom, response.back];\n                var textureEarth = response.earth;\n                var earthTexture = new BABYLON.StandardMaterial('planteTexture', scene);\n                skyboxMaterial.reflectionTexture = BABYLON.CubeTexture.CreateFromImages(texturesSkybox, scene);\n                skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n                skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\n                skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\n                skyboxMaterial.disableLighting = true;\n                skybox.material = skyboxMaterial;\n\n                earthTexture = new BABYLON.StandardMaterial('planteTexture', scene);\n                earthTexture.freeze();\n                earthTexture.diffuseTexture = new BABYLON.Texture(textureEarth, scene);\n                earthTexture.specularTexture = new BABYLON.Texture(textureEarth, scene);\n                earthTexture.diffuseTexture.wAng = 3.1415926536;\n                earthTexture.specularTexture.wAng = 3.1415926536;\n                earth.material = earthTexture;\n                earth.visibility = true;\n\n                skybox.convertToUnIndexedMesh();\n                skyboxMaterial.freeze();\n                skyboxMaterial.backFaceCulling = false;\n                skybox.infiniteDistance = true;\n                skybox.renderingGroupId = 0;\n            }\n        };\n    };\n\n    BabylonScene.prototype.createCamera = function () {\n        var camera = new BABYLON.UniversalCamera(\"camera\", new BABYLON.Vector3(0, 0, 0), scene);\n        //camera.detachControl(canvas, true);\n        camera.attachControl(canvas, true);\n        camera.position = new BABYLON.Vector3(-2000, 1500, -2500);\n        camera.setTarget(new BABYLON.Vector3(-2000, 500, 0));\n    };\n\n    BabylonScene.prototype.onResizeEvent = function () {\n        window.addEventListener('resize', function () {\n            engine.resize();\n        });\n    };\n\n    /**\n    *@return {Object} Babylon scene\n    */\n    BabylonScene.prototype.getScene = function () {\n        return scene;\n    };\n\n    return this;\n}\n\nexports.default = BabylonScene;\n\n//# sourceURL=webpack:///./src/game/BabylonScene.js?");

/***/ }),

/***/ "./src/game/BulletMaker.js":
/*!*********************************!*\
  !*** ./src/game/BulletMaker.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*global\n                                                                                                                                                                                                                                                                                  BABYLON\n                                                                                                                                                                                                                                                                              */\n\n\nvar _Helpers = __webpack_require__(/*! ./Helpers */ \"./src/game/Helpers.js\");\n\nvar _Helpers2 = _interopRequireDefault(_Helpers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bulletsArray = [];\n\n/**\n*Create bullets\n*@factory\n*/\nfunction BulletMaker() {\n    \"use strict\";\n\n    BulletMaker.prototype.shoot = function () {\n        var reloaded = false;\n        var that = this;\n        var _helpers = new _Helpers2.default();\n        var ammoUI = null;\n\n        if (_typeof(BulletMaker.oryginalBullet) !== \"object\") {\n            BulletMaker.oryginalBullet = BABYLON.Mesh.CreateSphere('oryginalBullet', 3, 0.75, this.scene);\n            BulletMaker.oryginalBullet.convertToUnIndexedMesh();\n        }\n\n        /**\n        *Explode bullet when hit\n        */\n        var explodeBullet = function explodeBullet(pos) {\n            var particleSystem = new BABYLON.ParticleSystem(\"particlesBullet\", 1000, that.scene);\n            particleSystem.particleTexture = new BABYLON.Texture(_helpers.baseUrl() + '/assets/flare.png', that.scene);\n            particleSystem.emitter = new BABYLON.Vector3(pos.x, pos.y, pos.z);\n            particleSystem.minEmitBox = new BABYLON.Vector3(0, 0, 0);\n            particleSystem.maxEmitBox = new BABYLON.Vector3(0, 0, 0);\n            particleSystem.color2 = new BABYLON.Color4(1, 0, 0, 1.0);\n            particleSystem.minSize = 0.3;\n            particleSystem.maxSize = 0.5;\n            particleSystem.minLifeTime = 0.3;\n            particleSystem.maxLifeTime = 1;\n            particleSystem.emitRate = 3000;\n            particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ONEONE;\n            particleSystem.direction1 = new BABYLON.Vector3(50, 50, 50);\n            particleSystem.direction2 = new BABYLON.Vector3(-50, -50, -50);\n            particleSystem.minAngularSpeed = 0;\n            particleSystem.maxAngularSpeed = Math.PI;\n            particleSystem.minEmitPower = 0.1;\n            particleSystem.maxEmitPower = 0.5;\n            particleSystem.updateSpeed = 0.01;\n            particleSystem.start();\n            particleSystem.targetStopDuration = 0.10;\n        };\n\n        /**\n        *If ammunitions > 0 shoot, otherwise reload\n        */\n        if (this.currentAmmo > 0) {\n            this.currentAmmo -= 1;\n\n            if (!this.isBot) {\n                ammoUI = document.getElementById('ammo');\n                ammoUI.innerHTML = this.currentAmmo;\n            }\n\n            var bullet = BulletMaker.oryginalBullet.clone('bullet' + this.bulletId);\n            bullet.myId = this.bulletId;\n            bullet.shipId = this.shipId;\n            this.bulletId += 1;\n            bullet.scaling.z = 2;\n            var startPos = this.ship.body.position;\n            bullet.position = new BABYLON.Vector3(startPos.x, startPos.y, startPos.z);\n            bullet.checkCollisions = true;\n            bullet.rotationQuaternion = this.ship.body.rotationQuaternion;\n\n            bulletsArray.push(bullet);\n\n            var direction = BABYLON.Vector3.TransformNormal(new BABYLON.Vector3(0, 0, 1), this.ship.body.getWorldMatrix());\n            direction.scaleInPlace(20);\n            var i = 0;\n            var j = bulletsArray.length;\n\n            /**\n            * If bullets is outsied the world, remove it\n            */\n            for (i = 0; i < j; i += 1) {\n                if (bulletsArray[i] !== \"undefined\" && (bulletsArray[i].position.x > 4000 || bulletsArray[i].position.x < -4000 || bulletsArray[i].position.y > 4000 || bulletsArray[i].position.y < -4000 || bulletsArray[i].position.z > 4000 || bulletsArray[i].position.z < -4000)) {\n                    if (bulletsArray[i] !== \"undefined\") {\n                        /**\n                        *Clear unused Babylon.js observables\n                        */\n                        this.scene.onBeforeRenderObservable.remove(this.observableBullets[bulletsArray[i].myId]);\n                        var id = bulletsArray[i].myId;\n                        delete this.observableBullets[id];\n                        bulletsArray[i].visibility = false;\n                        bulletsArray[i].dispose();\n\n                        if (bulletsArray[i]._isDisposed) {\n                            bulletsArray.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            this.observableBullets[this.bulletId - 1] = this.scene.onBeforeRenderObservable.add(function () {\n                bullet.position.addInPlace(direction);\n                i = 0;\n                j = that.allShips.length;\n                for (i = 0; i < j; i += 1) {\n                    if (bullet.intersectsMesh(that.allShips[i].body, true) && that.allShips[i].body.visibility === 1) {\n                        bullet.visibility = false;\n                        bullet.checkCollisions = false;\n                        explodeBullet(that.allShips[i].body.position);\n                        that.allShips[i].reduceHP(bullet.shipId);\n                    }\n                }\n            });\n        } else {\n            if (that.reloaded === false) {\n                that.reloaded = true;\n                /**\n                *Reload time - 3s\n                */\n                setTimeout(function () {\n                    that.reloaded = false;\n                    that.currentAmmo = that.ammo;\n                    if (!that.isBot) {\n                        ammoUI.innerHTML = that.currentAmmo;\n                    }\n                }, 3000);\n            }\n        }\n    };\n}\n\n/**\n*Static method factory\n*@constructor\n*/\nBulletMaker.factory = function (type, args) {\n    \"use strict\";\n\n    var _constructor = type;\n    var bullet = null;\n\n    if (typeof BulletMaker[_constructor] !== \"function\") {\n        throw _constructor + ' does not exist';\n    }\n\n    if (typeof BulletMaker[_constructor].prototype.shoot !== \"function\") {\n        BulletMaker[_constructor].prototype = new BulletMaker();\n    }\n\n    bullet = new BulletMaker[_constructor](args);\n    return bullet;\n};\n\n/**\n*Definitions of specific constructors\n*/\nBulletMaker.Laser = function (args) {\n    \"use strict\";\n\n    this.ammo = args.ammo;\n    this.currentAmmo = args.ammo;\n    this.scene = args.scene;\n    this.ship = args.ship;\n    this.shipId = args.shipId;\n    this.allShips = args.allShips;\n    this.isBot = args.isBot;\n    this.observableBullets = {};\n    this.bulletId = 0;\n    this.reloaded = false;\n};\n\nexports.default = BulletMaker;\n\n//# sourceURL=webpack:///./src/game/BulletMaker.js?");

/***/ }),

/***/ "./src/game/Enemy.js":
/*!***************************!*\
  !*** ./src/game/Enemy.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*global\n    BABYLON\n*/\n\nfunction Enemy(args) {\n    \"use strict\";\n\n    var ShipMaker = args.shipMaker;\n    var helpers = args.helpers;\n    var scene = args.scene;\n    var BulletMaker = args.bulletMaker;\n    var Explosions = args.explosions;\n    var UI = args.userInterface;\n    var enemyShipConfig = {\n        speed: 2, // Bot speed\n        hp: 3, // Lives\n        ammo: 1, // Ammo\n        zRot: 0,\n        maxRotZ: 0.6,\n        xRot: 0,\n        maxRotX: 1.3\n    };\n    var currentHp = enemyShipConfig.hp;\n    var currentSpeed = enemyShipConfig.speed;\n    var enemyShipMovement = {\n        left: false,\n        right: false,\n        up: false,\n        down: false,\n        fast: false,\n        slow: false\n    };\n\n    var shipId = null;\n    var respawn = false;\n    /**\n    *Wolrd bounds collision\n    */\n    var collisionDetected = false;\n    /**\n    *Is target found\n    */\n    var targetFound = false;\n    /**\n    *Target ship ID\n    *If -1 => target not found\n    */\n    var targetId = -1;\n    /**\n    *If ship is aimed\n    */\n    var shipDetected = false;\n\n    Enemy.prototype.create = function () {\n        var shipFactory = ShipMaker.factory('Bot');\n        shipFactory.createShip(scene, helpers);\n\n        /**\n        *Create shpere - aim\n        *Used to find closest enemy ship and calculate angle between this ship and enemy\n        *@return {Object}\n        */\n        var createAim = function createAim() {\n            var aim = BABYLON.Mesh.CreateSphere(\"aim\", 1, 1, scene);\n            aim.position = new BABYLON.Vector3(0, 4, 0);\n            aim.rotationQuaternion = new BABYLON.Quaternion.Identity();\n            aim.visibility = false;\n            return aim;\n        };\n\n        /**\n        * Raycasts (used here simple line instead babylon.js raycast)\n        */\n        var createRaycast = function createRaycast(shipBody) {\n            var raycast = BABYLON.Mesh.CreateLines(\"raycast\", [new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, 0, 6000)], scene);\n            raycast.parent = shipBody;\n            raycast.checkCollision = true;\n            raycast.visibility = false;\n            return raycast;\n        };\n\n        var initShipMovement = function initShipMovement(ship) {\n            ship.body.translate(BABYLON.Axis.Z, currentSpeed, BABYLON.Space.LOCAL);\n            ship.engine.translate(BABYLON.Axis.Z, currentSpeed, BABYLON.Space.LOCAL);\n            ship.glass.translate(BABYLON.Axis.Z, currentSpeed, BABYLON.Space.LOCAL);\n\n            if (enemyShipMovement.left) {\n                ship.body.rotate(BABYLON.Axis.Y, -0.02, BABYLON.Space.WORLD);\n                ship.engine.rotate(BABYLON.Axis.Y, -0.02, BABYLON.Space.WORLD);\n                ship.glass.rotate(BABYLON.Axis.Y, -0.02, BABYLON.Space.WORLD);\n\n                if (ship.body._rotationQuaternion.toEulerAngles().z < enemyShipConfig.maxRotZ) {\n                    ship.body.rotate(BABYLON.Axis.Z, +0.05, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.Z, +0.05, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.Z, +0.05, BABYLON.Space.LOCAL);\n                }\n            } else {\n                if (ship.body._rotationQuaternion) {\n                    if (ship.body._rotationQuaternion.toEulerAngles().z < 0.03) {\n                        ship.body.rotate(BABYLON.Axis.Z, +0.02, BABYLON.Space.LOCAL);\n                        ship.engine.rotate(BABYLON.Axis.Z, +0.02, BABYLON.Space.LOCAL);\n                        ship.glass.rotate(BABYLON.Axis.Z, +0.02, BABYLON.Space.LOCAL);\n                    }\n                }\n            }\n\n            if (enemyShipMovement.right) {\n                ship.body.rotate(BABYLON.Axis.Y, +0.02, BABYLON.Space.WORLD);\n                ship.engine.rotate(BABYLON.Axis.Y, +0.02, BABYLON.Space.WORLD);\n                ship.glass.rotate(BABYLON.Axis.Y, +0.02, BABYLON.Space.WORLD);\n\n                if (ship.body._rotationQuaternion.toEulerAngles().z > -enemyShipConfig.maxRotZ) {\n                    ship.body.rotate(BABYLON.Axis.Z, -0.05, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.Z, -0.05, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.Z, -0.05, BABYLON.Space.LOCAL);\n                }\n            } else {\n                if (ship.body._rotationQuaternion) {\n                    if (ship.body._rotationQuaternion.toEulerAngles().z > 0.03) {\n                        ship.body.rotate(BABYLON.Axis.Z, -0.02, BABYLON.Space.LOCAL);\n                        ship.engine.rotate(BABYLON.Axis.Z, -0.02, BABYLON.Space.LOCAL);\n                        ship.glass.rotate(BABYLON.Axis.Z, -0.02, BABYLON.Space.LOCAL);\n                    }\n                }\n            }\n\n            if (enemyShipMovement.bottom) {\n                if (enemyShipConfig.xRot > -enemyShipConfig.maxRotX) {\n                    enemyShipConfig.xRot = enemyShipConfig.xRot - 0.02;\n                    ship.body.rotate(BABYLON.Axis.X, -0.02, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.X, -0.02, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.X, -0.02, BABYLON.Space.LOCAL);\n                }\n            }\n\n            if (enemyShipMovement.top) {\n                if (enemyShipConfig.xRot < enemyShipConfig.maxRotX) {\n                    enemyShipConfig.xRot = enemyShipConfig.xRot + 0.02;\n                    ship.body.rotate(BABYLON.Axis.X, +0.02, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.X, +0.02, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.X, +0.02, BABYLON.Space.LOCAL);\n                }\n            }\n        };\n\n        /**\n        *When the ship approaches world bounds, turn back\n        */\n        var checkWorldBoundsCollision = function checkWorldBoundsCollision(ship) {\n            if (ship.body.position.x < -3000 || ship.body.position.x > -1300) {\n                enemyShipMovement.left = true;\n                collisionDetected = true;\n                setTimeout(function () {\n                    enemyShipMovement.left = false;\n                    collisionDetected = false;\n                }, 2000);\n            } else if (ship.body.position.z < -3000 || ship.body.position.z > -1300) {\n                enemyShipMovement.left = true;\n                collisionDetected = true;\n                setTimeout(function () {\n                    enemyShipMovement.left = false;\n                    collisionDetected = false;\n                }, 2000);\n            }\n\n            if (ship.body.position.y > 1800) {\n                enemyShipMovement.top = true;\n                collisionDetected = true;\n                setTimeout(function () {\n                    enemyShipMovement.top = false;\n                    collisionDetected = false;\n                }, 1000);\n            }\n            if (ship.body.position.y < -1800) {\n                enemyShipMovement.bottom = true;\n                collisionDetected = true;\n                setTimeout(function () {\n                    enemyShipMovement.bottom = false;\n                    collisionDetected = false;\n                }, 1000);\n            }\n        };\n\n        /**\n        *Find enemy ship\n        *@return {Number} Enemy ship ID\n        */\n        var findTarget = function findTarget(ship, shipId, allShips, aim) {\n            /**\n            *Init value\n            *Best distance between ship and target\n            *Best angle between ship and target\n            */\n            var bestDistance = 9999;\n            var bestAngle = 365;\n            var bestShipByDistanceId = null;\n            var bestShipByAngleId = null;\n\n            /**\n            *If number of ships is smaller than 2 => No enemy, no target\n            */\n            if (allShips.length < 2) {\n                return -1;\n            }\n            var i = 0;\n            var j = allShips.length;\n            for (i = 0; i < j; i += 1) {\n                if (i !== shipId && allShips[i]) {\n                    var distance = BABYLON.Vector3.Distance(ship.body.position, allShips[i].body.position);\n                    if (distance < bestDistance) {\n                        bestDistance = distance;\n                        bestShipByDistanceId = i;\n                    }\n\n                    var myAngle = ship.body.rotationQuaternion.toEulerAngles();\n                    var degreesMyAngleY = myAngle.y / (2 * Math.PI) * 360;\n\n                    aim.lookAt(allShips[i].body.position);\n                    var targetAngle = aim.rotationQuaternion.toEulerAngles();\n                    var degreesTargetAngleY = targetAngle.y / (2 * Math.PI) * 360;\n\n                    if (degreesTargetAngleY < 0) {\n                        degreesTargetAngleY += 180;\n                    } else {\n                        degreesTargetAngleY -= 180;\n                    }\n\n                    var angle = Math.abs(degreesMyAngleY - degreesTargetAngleY);\n\n                    if (angle < bestAngle) {\n                        bestAngle = angle;\n                        bestShipByAngleId = i;\n                    }\n                }\n            }\n\n            if (bestShipByAngleId === bestShipByDistanceId && bestShipByDistanceId !== null && bestShipByDistanceId !== null) {\n                targetFound = true;\n                return bestShipByAngleId;\n            } else {\n                if (bestAngle < 120) {\n                    targetFound = true;\n                    return bestShipByAngleId;\n                } else {\n                    return bestShipByDistanceId;\n                }\n            }\n        };\n        /**\n        *When the target was found, try to aim and shoot\n        */\n        var tryToAimAndKill = function tryToAimAndKill(ship, allShips, aim, raycast, bulletFactory) {\n            var target = allShips[targetId].body;\n            aim.lookAt(target.position);\n            var shipEuler = ship.body.rotationQuaternion.toEulerAngles();\n            var aimEuler = aim.rotationQuaternion.toEulerAngles();\n            var _bulletFactory = bulletFactory;\n\n            var eulerToDegreesY = aimEuler.y / (2 * Math.PI) * 360;\n            var eulerToDegreesX = aimEuler.x / (2 * Math.PI) * 360;\n\n            if (eulerToDegreesY < 0) {\n                eulerToDegreesY += 180;\n            } else {\n                eulerToDegreesY -= 180;\n            }\n\n            var shipEulerToDegreesY = shipEuler.y / (2 * Math.PI) * 360;\n            var shipEulerToDegreesX = shipEuler.x / (2 * Math.PI) * 360;\n            if (!collisionDetected && !shipDetected) {\n                var angleDiffY = Math.abs(shipEulerToDegreesY - eulerToDegreesY);\n                if (shipEulerToDegreesY > eulerToDegreesY && angleDiffY > 90) {\n                    /**\n                    *Try to find another target and turn left\n                    */\n                    targetId = -1;\n                    targetFound = false;\n\n                    enemyShipMovement.left = true;\n                    setTimeout(function () {\n                        enemyShipMovement.left = false;\n                    }, 800);\n                } else if (shipEulerToDegreesY < eulerToDegreesY && angleDiffY > 90) {\n                    /**\n                    *Try to find another target and turn right\n                    */\n                    targetId = -1;\n                    targetFound = false;\n\n                    enemyShipMovement.right = true;\n                    setTimeout(function () {\n                        enemyShipMovement.right = false;\n                    }, 800);\n                } else if (shipEulerToDegreesY > eulerToDegreesY && angleDiffY < 5) {\n                    /**\n                    * Focus aim on target Y axis\n                    */\n                    ship.body.rotate(BABYLON.Axis.Y, -0.005, BABYLON.Space.WORLD);\n                    ship.engine.rotate(BABYLON.Axis.Y, -0.005, BABYLON.Space.WORLD);\n                    ship.glass.rotate(BABYLON.Axis.Y, -0.005, BABYLON.Space.WORLD);\n                } else if (shipEulerToDegreesY < eulerToDegreesY && angleDiffY < 5) {\n                    /**\n                    * Focus aim on target, Y axis\n                    */\n                    ship.body.rotate(BABYLON.Axis.Y, +0.005, BABYLON.Space.WORLD);\n                    ship.engine.rotate(BABYLON.Axis.Y, +0.005, BABYLON.Space.WORLD);\n                    ship.glass.rotate(BABYLON.Axis.Y, +0.005, BABYLON.Space.WORLD);\n                } else if (shipEulerToDegreesY > eulerToDegreesY) {\n                    /**\n                    *Turn right\n                    */\n                    enemyShipMovement.left = true;\n                    setTimeout(function () {\n                        enemyShipMovement.left = false;\n                    }, 600);\n                } else if (shipEulerToDegreesY < eulerToDegreesY) {\n                    /**\n                    *Turn right\n                    */\n                    enemyShipMovement.right = true;\n                    setTimeout(function () {\n                        enemyShipMovement.right = false;\n                    }, 600);\n                }\n\n                var angleDiffX = Math.abs(shipEulerToDegreesX > eulerToDegreesX);\n                if (-1 * shipEulerToDegreesX > eulerToDegreesX && angleDiffX < 5 && (shipEulerToDegreesY > eulerToDegreesY && angleDiffY < 5 || shipEulerToDegreesY < eulerToDegreesY && angleDiffY < 5)) {\n                    /**\n                    * Focus aim on target, X axis\n                    */\n                    enemyShipConfig.xRot = enemyShipConfig.xRot + 0.001;\n                    ship.body.rotate(BABYLON.Axis.X, +0.001, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.X, +0.001, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.X, +0.001, BABYLON.Space.LOCAL);\n                } else if (-1 * shipEulerToDegreesX > eulerToDegreesX && angleDiffX < 5 && (shipEulerToDegreesY > eulerToDegreesY && angleDiffY < 5 || shipEulerToDegreesY < eulerToDegreesY && angleDiffY < 5)) {\n                    /**\n                    * Focus aim on target, X axis\n                    */\n                    enemyShipConfig.xRot = enemyShipConfig.xRot - 0.001;\n                    ship.body.rotate(BABYLON.Axis.X, -0.001, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.X, -0.001, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.X, -0.001, BABYLON.Space.LOCAL);\n                } else if (-1 * shipEulerToDegreesX > eulerToDegreesX) {\n                    /**\n                    * Fly up\n                    */\n                    enemyShipMovement.top = true;\n                    setTimeout(function () {\n                        enemyShipMovement.top = false;\n                    }, 100);\n                } else if (-1 * shipEulerToDegreesX < eulerToDegreesX) {\n                    /**\n                    * Fly bottom\n                    */\n                    enemyShipMovement.bottom = true;\n                    setTimeout(function () {\n                        enemyShipMovement.bottom = false;\n                    }, 100);\n                }\n            }\n\n            /**\n            *If raycast collided with target and not respawn => shoot\n            */\n            if (raycast.intersectsMesh(target, true) && !respawn) {\n                shipDetected = true;\n                _bulletFactory.shoot();\n            } else {\n                shipDetected = false;\n            }\n        };\n\n        /**\n        *When ship respawn, hide his parts\n        */\n        var respawnShip = function respawnShip(body, engine, glass) {\n            respawn = true;\n            /**\n            *Hide ship\n            */\n            body.visibility = false;\n            body.checkCollision = false;\n            engine.visibility = false;\n            glass.visibility = false;\n\n            /**\n            * Create explosion\n            *@param {Object} Current ship position\n            *@param {Object} Color of the ship\n            */\n            Explosions.create(body.position, body.material.diffuseColor);\n\n            /**\n            * Rand new ship position\n            */\n            var posX = -1 * Math.floor(Math.random() * (2000 - 1750 + 1) + 1750);\n            var posY = Math.floor(Math.random() * (1600 - 1300 + 1) + 1300);\n            var posZ = -1 * Math.floor(Math.random() * (2400 - 2300 + 1) + 2300);\n\n            /**\n            * Set new ship position\n            */\n            body.position = new BABYLON.Vector3(posX, posY, posZ);\n            engine.position = new BABYLON.Vector3(posX, posY, posZ);\n            glass.position = new BABYLON.Vector3(posX, posY, posZ);\n\n            /**\n            * Stop the ship\n            */\n            currentSpeed = 0;\n\n            /**\n            * Waint 4s for respawn\n            */\n            setTimeout(function () {\n                /**\n                * Reset ship hp\n                */\n                currentHp = enemyShipConfig.hp;\n                respawn = false;\n                /**\n                * Show the ship\n                */\n                body.visibility = true;\n                body.checkCollision = true;\n                engine.visibility = true;\n                glass.visibility = true;\n\n                /**\n                * Set ship speed\n                */\n                currentSpeed = enemyShipConfig.speed;\n            }, 4000);\n        };\n\n        scene.executeWhenReady(function () {\n            var ship = shipFactory.getEnemyShip();\n            ship.body.rotationQuaternion = new BABYLON.Quaternion.Identity();\n            shipId = shipFactory.getCreatedShipId();\n            var allShips = shipFactory.getAllShipsArray();\n\n            /**\n            *Added new method for all ships\n            *Its called when ship will be hitted by bullet\n            */\n            allShips[shipId].reduceHP = function (enemyShipId) {\n                currentHp -= 1;\n                if (currentHp < 1) {\n                    UI.addKillToInfoPanel(allShips[enemyShipId].name, this.name);\n                    respawnShip(this.body, this.engine, this.glass);\n                    allShips[enemyShipId].kill += 1;\n                    this.death += 1;\n                }\n            };\n            var aim = createAim();\n            var raycast = createRaycast(ship.body);\n            var bulletFactoryArgs = {\n                ammo: enemyShipConfig.ammo,\n                scene: scene,\n                ship: ship,\n                shipId: shipId,\n                allShips: allShips,\n                isBot: true\n            };\n            var bulletFactory = BulletMaker.factory('Laser', bulletFactoryArgs);\n\n            scene.onBeforeRenderObservable.add(function () {\n                initShipMovement(ship);\n                checkWorldBoundsCollision(ship);\n\n                /**\n                *Try to find target\n                */\n                if (!targetFound) {\n                    targetId = findTarget(ship, shipId, allShips, aim);\n                }\n\n                /**\n                *If target found, try to aim and kill\n                */\n                if (targetId !== -1) {\n                    tryToAimAndKill(ship, allShips, aim, raycast, bulletFactory);\n                }\n\n                aim.position = ship.body.position;\n            });\n        });\n    };\n}\n\nexports.default = Enemy;\n\n//# sourceURL=webpack:///./src/game/Enemy.js?");

/***/ }),

/***/ "./src/game/Explosions.js":
/*!********************************!*\
  !*** ./src/game/Explosions.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*global\n    BABYLON\n*/\nfunction Explosions(helpers, scene) {\n    \"use strict\";\n\n    var _helpers = helpers;\n    var _scene = scene;\n\n    Explosions.prototype.create = function (pos, color) {\n        var particleSystem = new BABYLON.ParticleSystem(\"explosion\", 2000, _scene);\n        particleSystem.particleTexture = new BABYLON.Texture(_helpers.baseUrl() + '/assets/flare.png', _scene);\n        particleSystem.emitter = new BABYLON.Vector3(pos.x, pos.y, pos.z);\n        particleSystem.minEmitBox = new BABYLON.Vector3(0, 0, 0);\n        particleSystem.maxEmitBox = new BABYLON.Vector3(0, 0, 0);\n        particleSystem.color2 = new BABYLON.Color4(color.r, color.g, color.b, 1.0);\n        particleSystem.minSize = 0.3;\n        particleSystem.maxSize = 0.8;\n        particleSystem.minLifeTime = 0.3;\n        particleSystem.maxLifeTime = 1.5;\n        particleSystem.emitRate = 12000;\n        particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ONEONE;\n        particleSystem.direction1 = new BABYLON.Vector3(50, 50, 50);\n        particleSystem.direction2 = new BABYLON.Vector3(-50, -50, -50);\n        particleSystem.minAngularSpeed = 0;\n        particleSystem.maxAngularSpeed = Math.PI;\n        particleSystem.minEmitPower = 0.1;\n        particleSystem.maxEmitPower = 0.5;\n        particleSystem.updateSpeed = 0.01;\n        particleSystem.start();\n        particleSystem.targetStopDuration = 0.10;\n    };\n}\n\nexports.default = Explosions;\n\n//# sourceURL=webpack:///./src/game/Explosions.js?");

/***/ }),

/***/ "./src/game/Game.js":
/*!**************************!*\
  !*** ./src/game/Game.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _Helpers = __webpack_require__(/*! ./Helpers */ \"./src/game/Helpers.js\");\n\nvar _Helpers2 = _interopRequireDefault(_Helpers);\n\nvar _BabylonScene = __webpack_require__(/*! ./BabylonScene */ \"./src/game/BabylonScene.js\");\n\nvar _BabylonScene2 = _interopRequireDefault(_BabylonScene);\n\nvar _Asteroids = __webpack_require__(/*! ./Asteroids */ \"./src/game/Asteroids.js\");\n\nvar _Asteroids2 = _interopRequireDefault(_Asteroids);\n\nvar _ShipMaker = __webpack_require__(/*! ./ShipMaker */ \"./src/game/ShipMaker.js\");\n\nvar _ShipMaker2 = _interopRequireDefault(_ShipMaker);\n\nvar _BulletMaker = __webpack_require__(/*! ./BulletMaker */ \"./src/game/BulletMaker.js\");\n\nvar _BulletMaker2 = _interopRequireDefault(_BulletMaker);\n\nvar _Explosions = __webpack_require__(/*! ./Explosions */ \"./src/game/Explosions.js\");\n\nvar _Explosions2 = _interopRequireDefault(_Explosions);\n\nvar _Player = __webpack_require__(/*! ./Player */ \"./src/game/Player.js\");\n\nvar _Player2 = _interopRequireDefault(_Player);\n\nvar _Enemy = __webpack_require__(/*! ./Enemy */ \"./src/game/Enemy.js\");\n\nvar _Enemy2 = _interopRequireDefault(_Enemy);\n\nvar _UI = __webpack_require__(/*! ./UI */ \"./src/game/UI.js\");\n\nvar _UI2 = _interopRequireDefault(_UI);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Game() {\n    \"use strict\";\n\n    var helpers = new _Helpers2.default();\n    var babylonScene = new _BabylonScene2.default();\n    var _scene = babylonScene.getScene();\n    var asteroids = new _Asteroids2.default(_scene, helpers);\n    var explosions = new _Explosions2.default(helpers, _scene);\n    var shipMaker = _ShipMaker2.default;\n    var userInterface = new _UI2.default();\n    var shipArgs = {\n        shipMaker: shipMaker,\n        scene: _scene,\n        helpers: helpers,\n        bulletMaker: _BulletMaker2.default,\n        explosions: explosions,\n        userInterface: userInterface\n    };\n\n    /**\n    *Number of bots\n    */\n    var bots = 5;\n    var i = 0;\n    for (i = 0; i < bots; i += 1) {\n        var enemy = new _Enemy2.default(shipArgs);\n        enemy.create();\n    }\n\n    babylonScene.createLights();\n    babylonScene.createSkyboxAndEarth(helpers);\n    babylonScene.createCamera();\n    babylonScene.onResizeEvent();\n\n    asteroids.create();\n\n    window.onload = function () {\n\n        var startBtn = document.getElementById('start');\n        startBtn.addEventListener('click', function () {\n            userInterface.initVirtualJoystick();\n            var player = new _Player2.default(shipArgs);\n            player.create();\n            userInterface.showInterface();\n            userInterface.closeSidebar();\n        }, false);\n    };\n}\n\nexports.default = Game;\n\n//# sourceURL=webpack:///./src/game/Game.js?");

/***/ }),

/***/ "./src/game/Helpers.js":
/*!*****************************!*\
  !*** ./src/game/Helpers.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global\n    window\n*/\n\n/**\n*@singleton\n*/\nfunction Helpers() {\n    \"use strict\";\n\n    if (_typeof(Helpers.instance) === \"object\") {\n        return Helpers.instance;\n    }\n\n    Helpers.instance = this;\n\n    /**\n    *Get base url\n    *@return base url\n    */\n    Helpers.prototype.baseUrl = function () {\n        var _getUrl = window.location;\n        var _baseUrl = _getUrl.protocol + \"//\" + _getUrl.host + \"/\" + _getUrl.pathname.split('/')[1];\n\n        return _baseUrl;\n    };\n\n    Helpers.prototype.isEmptyObject = function (obj) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) return false;\n        }\n\n        return JSON.stringify(obj) === JSON.stringify({});\n    };\n}\n\nexports.default = Helpers;\n\n//# sourceURL=webpack:///./src/game/Helpers.js?");

/***/ }),

/***/ "./src/game/Player.js":
/*!****************************!*\
  !*** ./src/game/Player.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global\n    BABYLON\n*/\n\n/**\n*@singleton\n*/\nfunction Player(args) {\n    \"use strict\";\n\n    if (_typeof(Player.instance) === \"object\") {\n        return Player.instance;\n    }\n    Player.intance = this;\n\n    var ShipMaker = args.shipMaker;\n    var helpers = args.helpers;\n    var scene = args.scene;\n    var BulletMaker = args.bulletMaker;\n    var Explosions = args.explosions;\n    var UI = args.userInterface;\n    var joystick = UI.getVirtualJoystick();\n\n    /**\n    *Ship`s parameters\n    */\n    var playerShipConfig = {\n        speed: 0, // Player speed\n        hp: 3, //Player hp\n        minSpeed: 0.54, // Minimum speed\n        maxSpeed: 2.54, // Maximum speed\n        acc: 0.03, // Acceleration\n        ammo: 40\n    };\n    var powerUI = document.getElementById('power');\n    var p = playerShipConfig.speed / playerShipConfig.maxSpeed * 100;\n    powerUI.innerHTML = p.toFixed(0);\n\n    var currentHp = playerShipConfig.hp;\n    var shipId = null;\n    var blockKeyboard = false;\n    var respawn = false;\n    var gunsight = null;\n\n    Player.prototype.create = function () {\n        var shipFactory = ShipMaker.factory('Player');\n        shipFactory.createShip(scene, helpers);\n\n        /**\n        *@return {Object} camera Ship`s camera\n        */\n        var createShipCamera = function createShipCamera() {\n            var camera = new BABYLON.FollowCamera(\"FollowCam\", new BABYLON.Vector3(0, 0, -10), scene);\n            camera.radius = 25;\n            camera.heightOffset = 4;\n            camera.rotationOffset = 180;\n            camera.ctype = 2;\n            camera.cameraAcceleration = 0.08;\n            camera.maxCameraSpeed = 10;\n            return camera;\n        };\n\n        var createGunsight = function createGunsight() {\n            var circle = BABYLON.Mesh.CreatePlane(\"gunsight\", 4, scene);\n            var circlemat = new BABYLON.StandardMaterial(\"gunsightMaterial\", scene);\n            circlemat.emissiveTexture = new BABYLON.Texture(helpers.baseUrl() + \"/assets/gunsight.png\", scene);\n            circlemat.opacityTexture = circlemat.emissiveTexture;\n            circle.material = circlemat;\n            circle.material.freeze();\n            circle.renderingGroupId = 1;\n\n            return circle;\n        };\n\n        var initKeyboard = function initKeyboard(inputMap) {\n            scene.actionManager = new BABYLON.ActionManager(scene);\n            scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {\n                inputMap[evt.sourceEvent.key] = evt.sourceEvent.type === \"keydown\";\n            }));\n            scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {\n                inputMap[evt.sourceEvent.key] = evt.sourceEvent.type === \"keydown\";\n            }));\n        };\n\n        var shipMovementParms = {\n            startAcc: 0.004,\n            accLeft: 0.004,\n            accRight: 0.004,\n            maxAcc: 0.02,\n            minAcc: 0.004,\n            m: 0.06,\n            startAccX: 0.003,\n            accDown: 0.004,\n            accTop: 0.004,\n            maxAccX: 0.02,\n            minAccX: 0.003,\n            mX: 0.06,\n            zRot: 0,\n            maxRotZ: 0.6,\n            xRot: 0,\n            maxRotX: 1.3\n        };\n\n        var initMovement = function initMovement(inputMap, ship, shipId, allShips, bulletFactory) {\n            if (!blockKeyboard) {\n\n                var xKey = document.getElementById('X-Key');\n                xKey.addEventListener('touchstart', function (event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    inputMap[\" \"] = true;\n                }, false);\n                xKey.addEventListener('touchend', function () {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    inputMap[\" \"] = false;\n                }, false);\n\n                if (inputMap[\" \"]) {\n                    bulletFactory.shoot();\n                }\n\n                var aKey = document.getElementById('A-Key');\n                aKey.addEventListener('touchstart', function (event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    console.log('kkk');\n                    inputMap[\"a\"] = true;\n                }, false);\n                aKey.addEventListener('touchend', function () {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    inputMap[\"a\"] = false;\n                }, false);\n\n                if (inputMap['a']) {\n                    if (playerShipConfig.speed < playerShipConfig.maxSpeed) {\n                        playerShipConfig.speed += playerShipConfig.acc;\n                        var val = playerShipConfig.speed / playerShipConfig.maxSpeed * 100;\n                        powerUI.innerHTML = val.toFixed(0);\n                    }\n                }\n\n                var zKey = document.getElementById('Z-Key');\n                zKey.addEventListener('touchstart', function (event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    inputMap[\"z\"] = true;\n                }, false);\n                zKey.addEventListener('touchend', function () {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    inputMap[\"z\"] = false;\n                }, false);\n\n                if (inputMap[\"z\"]) {\n                    if (playerShipConfig.speed > playerShipConfig.minSpeed) {\n                        playerShipConfig.speed -= playerShipConfig.acc;\n                        var _val = playerShipConfig.speed / playerShipConfig.maxSpeed * 100;\n                        powerUI.innerHTML = _val.toFixed(0);\n                    }\n                }\n\n                if (inputMap[\"ArrowLeft\"] || joystick.left()) {\n                    shipMovementParms.accRight = shipMovementParms.startAcc;\n                    if (shipMovementParms.accLeft < shipMovementParms.maxAcc) {\n                        shipMovementParms.accLeft += shipMovementParms.accLeft * shipMovementParms.m;\n                    }\n                    ship.body.rotate(BABYLON.Axis.Y, -shipMovementParms.accLeft, BABYLON.Space.WORLD);\n                    ship.engine.rotate(BABYLON.Axis.Y, -shipMovementParms.accLeft, BABYLON.Space.WORLD);\n                    ship.glass.rotate(BABYLON.Axis.Y, -shipMovementParms.accLeft, BABYLON.Space.WORLD);\n\n                    if (ship.body._rotationQuaternion.toEulerAngles().z < shipMovementParms.maxRotZ) {\n                        ship.body.rotate(BABYLON.Axis.Z, +0.05, BABYLON.Space.LOCAL);\n                        ship.engine.rotate(BABYLON.Axis.Z, +0.05, BABYLON.Space.LOCAL);\n                        ship.glass.rotate(BABYLON.Axis.Z, +0.05, BABYLON.Space.LOCAL);\n                    }\n                } else {\n                    if (shipMovementParms.accLeft > shipMovementParms.minAcc) {\n                        shipMovementParms.accLeft = shipMovementParms.startAcc;\n                    }\n                }\n\n                if (inputMap[\"ArrowRight\"] || joystick.right()) {\n                    shipMovementParms.accLeft = shipMovementParms.startAcc;\n                    if (shipMovementParms.accRight < shipMovementParms.maxAcc) {\n                        shipMovementParms.accRight += shipMovementParms.accRight * shipMovementParms.m;\n                    }\n                    ship.body.rotate(BABYLON.Axis.Y, +shipMovementParms.accRight, BABYLON.Space.WORLD);\n                    ship.engine.rotate(BABYLON.Axis.Y, +shipMovementParms.accRight, BABYLON.Space.WORLD);\n                    ship.glass.rotate(BABYLON.Axis.Y, +shipMovementParms.accRight, BABYLON.Space.WORLD);\n\n                    if (ship.body._rotationQuaternion.toEulerAngles().z > -shipMovementParms.maxRotZ) {\n                        ship.body.rotate(BABYLON.Axis.Z, -0.05, BABYLON.Space.LOCAL);\n                        ship.engine.rotate(BABYLON.Axis.Z, -0.05, BABYLON.Space.LOCAL);\n                        ship.glass.rotate(BABYLON.Axis.Z, -0.05, BABYLON.Space.LOCAL);\n                    }\n                } else {\n                    if (shipMovementParms.accRight > shipMovementParms.minAcc) {\n                        shipMovementParms.accRight = shipMovementParms.startAcc;\n                    }\n                }\n\n                if (inputMap[\"ArrowDown\"] || joystick.down()) {\n                    if (shipMovementParms.xRot > -shipMovementParms.maxRotX) {\n                        shipMovementParms.accTop = shipMovementParms.startAccX;\n                        if (shipMovementParms.accDown < shipMovementParms.maxAccX) {\n                            shipMovementParms.accDown += shipMovementParms.accDown * shipMovementParms.mX;\n                        }\n                        shipMovementParms.xRot = shipMovementParms.xRot - shipMovementParms.accDown;\n\n                        ship.body.rotate(BABYLON.Axis.X, -shipMovementParms.accDown, BABYLON.Space.LOCAL);\n                        ship.engine.rotate(BABYLON.Axis.X, -shipMovementParms.accDown, BABYLON.Space.LOCAL);\n                        ship.glass.rotate(BABYLON.Axis.X, -shipMovementParms.accDown, BABYLON.Space.LOCAL);\n                    }\n                } else {\n                    if (shipMovementParms.accDown > shipMovementParms.minAccX) {\n                        shipMovementParms.accDown -= shipMovementParms.accDown * 0.03;\n                    }\n                }\n\n                if (inputMap[\"ArrowUp\"] || joystick.up()) {\n                    if (shipMovementParms.xRot < shipMovementParms.maxRotX) {\n                        shipMovementParms.accDown = shipMovementParms.startAccX;\n\n                        if (shipMovementParms.accTop < shipMovementParms.maxAccX) {\n                            shipMovementParms.accTop += shipMovementParms.accTop * shipMovementParms.mX;\n                        }\n\n                        shipMovementParms.xRot = shipMovementParms.xRot + shipMovementParms.accTop;\n\n                        ship.body.rotate(BABYLON.Axis.X, shipMovementParms.accTop, BABYLON.Space.LOCAL);\n                        ship.engine.rotate(BABYLON.Axis.X, shipMovementParms.accTop, BABYLON.Space.LOCAL);\n                        ship.glass.rotate(BABYLON.Axis.X, shipMovementParms.accTop, BABYLON.Space.LOCAL);\n                    }\n                } else {\n                    if (shipMovementParms.accTop > shipMovementParms.minAccX) {\n                        shipMovementParms.accTop -= shipMovementParms.accTop * 0.03;\n                    }\n                }\n            }\n\n            if (ship.body._rotationQuaternion) {\n                if (ship.body._rotationQuaternion.toEulerAngles().z > 0.03) {\n                    ship.body.rotate(BABYLON.Axis.Z, -0.02, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.Z, -0.02, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.Z, -0.02, BABYLON.Space.LOCAL);\n                }\n\n                if (ship.body._rotationQuaternion.toEulerAngles().z < 0.03) {\n                    ship.body.rotate(BABYLON.Axis.Z, +0.02, BABYLON.Space.LOCAL);\n                    ship.engine.rotate(BABYLON.Axis.Z, +0.02, BABYLON.Space.LOCAL);\n                    ship.glass.rotate(BABYLON.Axis.Z, +0.02, BABYLON.Space.LOCAL);\n                }\n            }\n\n            if (ship.body.position.x < -3700 || ship.body.position.x > -1400 || ship.body.position.y > 2700 || ship.body.position.y < -2700 || ship.body.position.z < -3700 || ship.body.position.z > -1400) {\n                UI.showAlert();\n            } else {\n                UI.hideAlert();\n            }\n\n            if (ship.body.position.x < -4000 || ship.body.position.x > -1100 || ship.body.position.y > 3000 || ship.body.position.y < -3000 || ship.body.position.z < -4000 || ship.body.position.z > -1100) {\n                if (!respawn) {\n                    respawnShip(ship.body, ship.engine, ship.glass);\n                    allShips[shipId].death += 1;\n                    /**\n                    *@param {String} Player\n                    *@param {Boolean} is bot\n                    */\n                    UI.addSuicideToInfoPanel('You', false);\n                }\n            }\n        };\n\n        var respawnShip = function respawnShip(body, engine, glass) {\n            respawn = true;\n            blockKeyboard = true;\n            /**\n            *Hide ship\n            */\n            body.visibility = false;\n            body.checkCollision = false;\n            engine.visibility = false;\n            glass.visibility = false;\n            gunsight.visibility = false;\n\n            /**\n            * Create explosion\n            *@param {Object} Current ship position\n            *@param {Object} Color of the ship\n            */\n            Explosions.create(body.position, body.material.diffuseColor);\n\n            /**\n            * Rand new ship position\n            */\n            var posX = -1 * Math.floor(Math.random() * (2000 - 1750 + 1) + 1750);\n            var posY = Math.floor(Math.random() * (1600 - 1300 + 1) + 1300);\n            var posZ = -1 * Math.floor(Math.random() * (2400 - 2300 + 1) + 2300);\n\n            /**\n            * Stop the ship\n            */\n            playerShipConfig.speed = 0;\n\n            /**\n            * Waint 4s for respawn\n            */\n            setTimeout(function () {\n                /**\n                * Set new ship position\n                */\n                body.position = new BABYLON.Vector3(posX, posY, posZ);\n                engine.position = new BABYLON.Vector3(posX, posY, posZ);\n                glass.position = new BABYLON.Vector3(posX, posY, posZ);\n                /**\n                * Reset ship hp\n                */\n                currentHp = playerShipConfig.hp;\n                UI.resetHP();\n                respawn = false;\n                blockKeyboard = false;\n                /**\n                * Show the ship\n                */\n                body.visibility = true;\n                body.checkCollision = true;\n                engine.visibility = true;\n                glass.visibility = true;\n                gunsight.visibility = true;\n\n                /**\n                * Set ship speed\n                */\n                playerShipConfig.speed = playerShipConfig.maxSpeed;\n            }, 4000);\n        };\n\n        /**\n        * Wait for import ship\n        */\n        scene.executeWhenReady(function () {\n            var ship = shipFactory.getPlayerShip();\n            /**\n            * Change camera\n            */\n            var shipCamera = createShipCamera();\n            shipCamera.lockedTarget = ship.body;\n            scene.activeCamera = shipCamera;\n            shipId = shipFactory.getCreatedShipId();\n            var allShips = shipFactory.getAllShipsArray();\n\n            /**\n            *Added new method for all ships\n            *Its called when ship will be hitted by bullet\n            */\n            allShips[shipId].reduceHP = function (enemyShipId) {\n                currentHp -= 1;\n                UI.reduceHP();\n                if (currentHp < 1) {\n                    UI.addKillToInfoPanel(allShips[enemyShipId].name, this.name);\n                    respawnShip(this.body, this.engine, this.glass);\n                    allShips[enemyShipId].kill += 1;\n                    this.death += 1;\n                }\n            };\n            /**\n            *Create gunsight\n            */\n            gunsight = createGunsight(ship.body);\n            gunsight.parent = ship.body;\n            gunsight.position.z = 120;\n\n            var bulletFactoryArgs = {\n                ammo: playerShipConfig.ammo,\n                scene: scene,\n                ship: ship,\n                shipId: shipId,\n                allShips: allShips,\n                isBot: false\n            };\n            var bulletFactory = BulletMaker.factory('Laser', bulletFactoryArgs);\n            /**\n            * Init keyboard\n            */\n            var inputMap = {};\n            initKeyboard(inputMap);\n\n            scene.onBeforeRenderObservable.add(function () {\n                ship.body.translate(BABYLON.Axis.Z, playerShipConfig.speed, BABYLON.Space.LOCAL);\n                ship.engine.translate(BABYLON.Axis.Z, playerShipConfig.speed, BABYLON.Space.LOCAL);\n                ship.glass.translate(BABYLON.Axis.Z, playerShipConfig.speed, BABYLON.Space.LOCAL);\n\n                initMovement(inputMap, ship, shipId, allShips, bulletFactory);\n            });\n        });\n    };\n}\n\nexports.default = Player;\n\n//# sourceURL=webpack:///./src/game/Player.js?");

/***/ }),

/***/ "./src/game/ShipMaker.js":
/*!*******************************!*\
  !*** ./src/game/ShipMaker.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _ShipMaterials = __webpack_require__(/*! ./ShipMaterials */ \"./src/game/ShipMaterials.js\");\n\nvar _ShipMaterials2 = _interopRequireDefault(_ShipMaterials);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n*Array of all ships\n*/\nvar allShips = [];\n\n/**\n*Create ship\n*@factory\n*/\n/*global\n    BABYLON\n*/\nfunction ShipMaker() {\n    \"use strict\";\n\n    /**\n    *The ship`s model meshes - ship body, ship engine and ship glass\n    */\n\n    var _shipMesh = {};\n    /**\n    *Array of enemy ships\n    */\n    var allEnemyShips = [];\n    /**\n    * Your ship\n    */\n    var playerShip = {};\n    /**\n    *Enemy ship\n    */\n    var enemyShip = {};\n\n    var createdShipId = null;\n\n    var botNames = ['Admiral', 'Billy', 'Blain', 'Boogie Man', 'Commando', 'Dangerous Dave', 'Danko', 'Dutch', 'John', 'Kruger', 'Poncho', 'Roach', 'Stevie', 'Bob'];\n\n    /**\n    * Create all ships here\n    */\n    ShipMaker.prototype.createShip = function (scene, helpers) {\n        var _scene = scene;\n        var _helpers = helpers;\n        /**\n        *Type bot or player\n        */\n        var _type = this.type;\n\n        /**\n        *\n        */\n        var initShipMaterialsAndTextures = function initShipMaterialsAndTextures(body, engine) {\n            var shipMaterials = new _ShipMaterials2.default();\n            var glowEngineMaterial = shipMaterials.getGlowEngineMaterial();\n\n            /**\n            *Random ship color\n            */\n            var shipMaterial = new BABYLON.StandardMaterial(\"shipMaterial\", _scene);\n            var r = Math.floor(Math.random() * 255) + 1;\n            var g = Math.floor(Math.random() * 255) + 1;\n            var b = Math.floor(Math.random() * 255) + 1;\n            var shipColor = new BABYLON.Color3(r / 255, g / 255, b / 255);\n            /**\n            *Get engine glow layer\n            */\n            var glowEngineLayer = shipMaterials.getGlowEngineLayer();\n            /**\n            *Set engine material\n            */\n            engine.material = glowEngineMaterial;\n\n            /**\n            *Set engine glow layer\n            */\n            glowEngineLayer.addIncludedOnlyMesh(engine);\n            glowEngineLayer.intensity = 2.75;\n\n            /**\n            *Set ship body color\n            */\n            shipMaterial.diffuseColor = shipColor;\n            body.material = shipMaterial;\n        };\n\n        /**\n        *Import ship mesh from .babylon file\n        */\n        var importShipMesh = function importShipMesh() {\n            BABYLON.SceneLoader.ImportMesh(\"\", _helpers.baseUrl() + \"/assets/\", \"ship.babylon\", _scene, function (meshes) {\n                var i = 0;\n                var tmp = meshes.length;\n\n                /**\n                * The ship`s model consists of three parts\n                */\n                var shipEngineMesh = void 0,\n                    shipGlassMesh = void 0,\n                    shipBodyMesh = void 0;\n                for (i = 0; i < tmp; i += 1) {\n                    if (meshes[i].id === 'ship') {\n                        shipBodyMesh = meshes[i];\n                    } else if (meshes[i].id === 'engine') {\n                        shipEngineMesh = meshes[i];\n                    } else if (meshes[i].id === 'glass') {\n                        shipGlassMesh = meshes[i];\n                    }\n                }\n\n                return initShipMesh({\n                    bodyMesh: shipBodyMesh,\n                    engineMesh: shipEngineMesh,\n                    glassMesh: shipGlassMesh\n                });\n            });\n        };\n\n        var initShipMesh = function initShipMesh(obj) {\n            _shipMesh = obj;\n        };\n\n        /**\n        * Import the ship model only once, other ships will be cloned.\n        */\n        if (_helpers.isEmptyObject(_shipMesh)) {\n            importShipMesh();\n        }\n        /**\n        * All ships\n        */\n        var addShipToArray = function addShipToArray(body, engine, glass, isBot) {\n            allShips.push({\n                id: null,\n                name: null,\n                body: body,\n                engine: engine,\n                glass: glass,\n                isBot: isBot,\n                kill: 0,\n                death: 0\n            });\n\n            var id = allShips.length - 1;\n            allShips[id].id = id;\n            createdShipId = id;\n            if (isBot) {\n                /**\n                *Rand bot name index\n                */\n                var index = Math.floor(Math.random() * botNames.length);\n                var suffix = Math.floor(Math.random() * 100) + 10;\n\n                allShips[id].name = botNames[index] + suffix;\n            } else {\n                allShips[id].name = 'You';\n            }\n        };\n\n        /**\n        * Wait for import ship mesh\n        */\n        _scene.executeWhenReady(function () {\n            /**\n            *Create cloned ship\n            */\n            var randomId = Math.random().toString(36).substring(7);\n            var shipBodyClone = _shipMesh.bodyMesh.clone('body' + randomId);\n            var shipEngineClone = _shipMesh.engineMesh.clone('engine' + randomId);\n            var shipGlassClone = _shipMesh.glassMesh.clone('glass' + randomId);\n\n            /**\n            *Set initial ship position\n            */\n            var posX = -1 * Math.floor(Math.random() * (1900 - 1850 + 1) + 1850);\n            var posY = Math.floor(Math.random() * (1400 - 1300 + 1) + 1300);\n            var posZ = -1 * Math.floor(Math.random() * (2400 - 2300 + 1) + 2300);\n            shipBodyClone.position = new BABYLON.Vector3(posX, posY, posZ);\n            shipEngineClone.position = new BABYLON.Vector3(posX, posY, posZ);\n            shipGlassClone.position = new BABYLON.Vector3(posX, posY, posZ);\n\n            /**\n            *Add ship materials and textures\n            */\n            initShipMaterialsAndTextures(shipBodyClone, shipEngineClone);\n\n            switch (_type) {\n                case 'Bot':\n                    enemyShip = {\n                        body: shipBodyClone,\n                        engine: shipEngineClone,\n                        glass: shipGlassClone\n                    };\n                    allEnemyShips.push({\n                        body: shipBodyClone,\n                        engine: shipEngineClone,\n                        glass: shipGlassClone\n                    });\n                    /**\n                    *@param {Object} shipBodyClone Ship body mesh\n                    *@param {Object} shipEngineClone Ship engine mesh\n                    *@param {Object} shipGlassClone Ship glass mesh\n                    *@param {Boolean} Is bot\n                    */\n                    addShipToArray(shipBodyClone, shipEngineClone, shipGlassClone, true);\n                    break;\n                case 'Player':\n                    playerShip = {\n                        body: shipBodyClone,\n                        engine: shipEngineClone,\n                        glass: shipGlassClone\n                    };\n                    /**\n                    *@param {Object} shipBodyClone Ship body mesh\n                    *@param {Object} shipEngineClone Ship engine mesh\n                    *@param {Object} shipGlassClone Ship glass mesh\n                    *@param {Boolean} Is bot\n                    */\n                    addShipToArray(shipBodyClone, shipEngineClone, shipGlassClone, false);\n                    break;\n            }\n        });\n    };\n\n    ShipMaker.prototype.getPlayerShip = function () {\n        return playerShip;\n    };\n\n    ShipMaker.prototype.getEnemyShip = function () {\n        return enemyShip;\n    };\n\n    ShipMaker.prototype.getAllShipsArray = function () {\n        return allShips;\n    };\n\n    ShipMaker.prototype.getCreatedShipId = function () {\n        return createdShipId;\n    };\n}\n\n/**\n*Static method factory\n*@constructor\n*/\nShipMaker.factory = function (type) {\n    \"use strict\";\n\n    var _constructor = type;\n    var ship = null;\n\n    if (typeof ShipMaker[_constructor] !== \"function\") {\n        throw _constructor + ' does not exist';\n    }\n\n    if (typeof ShipMaker[_constructor].prototype.createShip !== \"function\") {\n        ShipMaker[_constructor].prototype = new ShipMaker();\n    }\n\n    ship = new ShipMaker[_constructor]();\n    return ship;\n};\n\n/**\n*Definitions of specific constructors\n*/\nShipMaker.Player = function () {\n    \"use strict\";\n\n    this.type = 'Player';\n    this.name = 'You';\n};\n\nShipMaker.Bot = function () {\n    \"use strict\";\n\n    this.type = 'Bot';\n    this.name = 'Bot';\n};\nexports.default = ShipMaker;\n\n//# sourceURL=webpack:///./src/game/ShipMaker.js?");

/***/ }),

/***/ "./src/game/ShipMaterials.js":
/*!***********************************!*\
  !*** ./src/game/ShipMaterials.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global\n    BABYLON\n*/\n\n/**\n*Create ship materials and textures\n*/\nfunction ShipMaterials(scene) {\n    \"use strict\";\n\n    if (_typeof(ShipMaterials.instance) === \"object\") {\n        return ShipMaterials.instance;\n    }\n    ShipMaterials.instance = this;\n\n    var _scene = scene;\n    /**\n    *Ship engine material\n    */\n    var glowEngineMaterial = new BABYLON.StandardMaterial(\"glowEngineMaterial\", _scene);\n    /**\n    *Glowing engine layer\n    */\n    var glowEngineLayer = new BABYLON.GlowLayer(\"glowEngineLayer\", _scene);\n    /**\n    *Ship body material\n    */\n    var shipMaterial = new BABYLON.StandardMaterial(\"shipMaterial\", _scene);\n\n    glowEngineMaterial.freeze();\n    glowEngineMaterial.emissiveColor = new BABYLON.Color3.Gray();\n    glowEngineMaterial.diffuseColor = new BABYLON.Color3.Gray();\n    glowEngineMaterial.ambientColor = new BABYLON.Color3.Gray();\n\n    shipMaterial.freeze();\n\n    ShipMaterials.prototype.getGlowEngineMaterial = function () {\n        return glowEngineMaterial;\n    };\n\n    ShipMaterials.prototype.getGlowEngineLayer = function () {\n        return glowEngineLayer;\n    };\n\n    ShipMaterials.prototype.getShipMaterial = function () {\n        return shipMaterial;\n    };\n}\n\nexports.default = ShipMaterials;\n\n//# sourceURL=webpack:///./src/game/ShipMaterials.js?");

/***/ }),

/***/ "./src/game/UI.js":
/*!************************!*\
  !*** ./src/game/UI.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*global\n    VirtualJoystick, window\n*/\n\nfunction UI() {\n    \"use strict\";\n\n    if (_typeof(UI.instance) === \"object\") {\n        return UI.instance;\n    }\n    UI.intance = this;\n\n    var joystick = void 0;\n\n    UI.prototype.addKillToInfoPanel = function (player1, player2) {\n        var infoPanel = document.querySelector('.info-panel');\n        if (infoPanel.children.length === 4) {\n            infoPanel.removeChild(infoPanel.childNodes[0]);\n            infoPanel.insertAdjacentHTML(\"beforeend\", \"<p>\" + player1 + \" kill \" + player2 + \"</p>\");\n        } else {\n            infoPanel.insertAdjacentHTML(\"beforeend\", \"<p>\" + player1 + \" kill \" + player2 + \"</p>\");\n        }\n    };\n\n    UI.prototype.addSuicideToInfoPanel = function (player, isBot) {\n        var infoPanel = document.querySelector('.info-panel');\n        var i = isBot ? 'killed himself' : 'killed yourself';\n        if (infoPanel.children.length === 4) {\n            infoPanel.removeChild(infoPanel.childNodes[0]);\n            infoPanel.insertAdjacentHTML(\"beforeend\", \"<p>\" + player + \" \" + i + \"</p>\");\n        } else {\n            infoPanel.insertAdjacentHTML(\"beforeend\", \"<p>\" + player + \" \" + i + \"</p>\");\n        }\n    };\n\n    UI.prototype.showAlert = function () {\n        var alert = document.querySelector('.alert');\n        alert.classList.add('active');\n    };\n\n    UI.prototype.hideAlert = function () {\n        var alert = document.querySelector('.alert');\n        alert.classList.remove('active');\n    };\n\n    UI.prototype.showInterface = function () {\n        var startBtn = document.getElementById('start');\n        startBtn.classList.add('hide');\n        var infoPanel = document.querySelector('.info-panel');\n        infoPanel.classList.add('active');\n        var hpBar = document.querySelector('.hpBar');\n        hpBar.classList.add('active');\n        var ammo = document.querySelector('.ammo-wrapper');\n        ammo.classList.add('active');\n        var power = document.querySelector('.power-wrapper');\n        power.classList.add('active');\n        var fps = document.querySelector('.fps-wrapper');\n        fps.classList.add('active');\n        var sidebar = document.querySelector('.sidebar');\n        sidebar.classList.add('active');\n    };\n\n    UI.prototype.reduceHP = function () {\n        var lives = document.querySelector('.lives');\n        lives.removeChild(lives.lastChild);\n    };\n\n    UI.prototype.resetHP = function () {\n        var lives = document.querySelector('.lives');\n        lives.innerHTML = \"\";\n        lives.insertAdjacentHTML('beforeend', \"<span></span><span></span><span></span>\");\n        console.log(lives.childNodes.length);\n    };\n\n    UI.prototype.closeSidebar = function () {\n        var close = document.getElementById('close');\n        close.addEventListener('click', function () {\n            var sidebar = document.querySelector('.sidebar');\n            sidebar.parentNode.removeChild(sidebar);\n        }, false);\n    };\n\n    UI.prototype.initVirtualJoystick = function () {\n        var baseY = window.innerHeight - 100;\n\n        joystick = new VirtualJoystick({\n            mouseSupport: true,\n            limitStickTravel: true,\n            stationaryBase: true,\n            stickRadius: 50,\n            baseX: 100,\n            baseY: baseY\n        });\n\n        window.addEventListener('resize', function () {\n            if ((typeof joystick === \"undefined\" ? \"undefined\" : _typeof(joystick)) === \"object\") {\n                baseY = window.innerHeight - 163;\n                var joystickBase = document.getElementById('joystickBase');\n                joystickBase.style.top = baseY + 'px';\n            }\n        });\n    };\n\n    UI.prototype.getVirtualJoystick = function () {\n        return joystick;\n    };\n}\n\nexports.default = UI;\n\n//# sourceURL=webpack:///./src/game/UI.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _Game = __webpack_require__(/*! ./game/Game */ \"./src/game/Game.js\");\n\nvar _Game2 = _interopRequireDefault(_Game);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n    \"use strict\";\n\n    var game = new _Game2.default();\n})(); /**\n      *@author Czajka Mateusz <mateusz.czajka89@gmail.com>\n      */\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });